目录
1. UI视图	1
2. Objective-C语言特性	5
3. Runtime相关	10
4. RunLoop相关	13
5. 内存管理	14
6. Block相关	16
7. 多线程相关	18
8. 网络相关 Socket通信,TCP/IP和HTTP	24
9. 设计模式相关（六大设计模式）	26
10. 架构-框架相关	26
11. 算法相关	26
12. 第三方库相关	26
13. WKWebView与JS交互面试题	27
14. 方法的重写与重载总结	29
15. “深拷贝”和“浅拷贝”	29
16. block 为甚用copy而不是用retain？	30
17. NSString NSMutableString 区别	31
18. yymodel框架原理分析	31
六: SQLite, FMDB ,CoreData,NsUserDefaults	32
七:Git,Svn等版本控制工具	32
九: 单利	32

1.UI视图
1.1.UITable View相关
1.1.1.cell重用原理：
UITableView头文件，有两个数组 保存当前显示的cell（visiableCells），和 可重用的cell（reusableTableCells）
1、比如有100条数据，iPhone一屏最多显示10个cell。用[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier]创建10次cell，并给cell指定同样的重用标识,并且10个cell全部都加入到visiableCells数组，reusableTableCells为空。
2、 向上拖动tableView，当cell1完全移出屏幕，并且cellA完全显示出来的时候。cellA加入到 visiableCells，cell1移出visiableCells，加入到reusableTableCells。

3、接着向上拖动tableView，因为reusableTableCells中已经有值，所以，当需要显示新的 cell，cellForRowAtIndexPath再次被调用的时候，tableView dequeueReusableCellWithIdentifier:CellIdentifier，返回cell1。cell1加入到 visiableCells，cellA移出reusableTableCells；cell2移出visiableCells，cell2加入到 reusableTableCells。之后再需要显示的Cell就可以正常重用了。
1.1.2.UiTableViewDataShouce数据源同步问题:
如何解决tableView在多线程环境下去修改和访问的同步问题？
答：并发访问数据拷贝  和串行访问，两种方案。
并发访问，数据拷贝：并发及多个线程都可以执行在同一段时间，不需要互相等待，主线程与用户交互，子线程加载网络数据以及预排版。
解决方法：如下图，主线程首先拷贝一份数据给子线程完成预排版，网络请求与数据解析(json xml转化)，这时候如果主线程需要删除某些数据源操作，他就记录这条删除操作，在子线程完成各种加载操作后将这条操作与子线程进行同步一下，然后再回到主线程刷新界面
缺点：可能需要拷贝大量数据，比较消耗内

串行访问：创建一个GCD串行队列，主线程增删改操作需要等待子线程操作完成
解决方法：如上图，我们首先使用GCD创建一个串行队列，子线程先加入队列完成网络加载操作，如果这时候主线程需要修改数据源，这个操作就要等待子线程完成才去进行(串行执行)
缺点：可能子线程的网络请求速度慢，主线程UI操作等待时间长
1.2.事件传递&视图响应
1.2.1.UIView和CALayer区别
UIView为CALayer提供内容，以及负责处理触摸等事件，参与响应链
CALayer负责显示内容contents
为什么view只负责处理触摸事件呢，这体现系统设计的原则，就是单一职责原则，

事件传递 ： https://blog.csdn.net/weixin_38633659/article/details/125030427
1.2.2.事件链：
如下图所示，用户点击屏幕时，首先UIApplication对象先收到该点击事件，再依次传递给它上面的所有子view，直到传递到最上层，即UIApplication ——> UIWindow ——> RootViewController ——> View ——> Button，即传递链。而反之Button ——> View ——> RootViewController ——>UIWindow ——> UIApplication则称为响应链。简单总结，事件链包含传递链和响应链，事件通过传递链传递上去，通过响应链找到相应的UIResponse。
1.2.3.传递链：由系统向离用户最近的view传递，如上图所示。具体流程如下


用户在点击屏幕。系统将点击事件加入到UIApplication管理的消息队列中。UIApplication会从消息队列中取出该事件传递给UIWindow对象；在UIWindow中调用方法hitTest:withEvent:返回最终相应的view；
在hitTest:withEvent:方法中调用pointInside:withEvent:来判断当前点击的点是否在UIWindow内部；如若返回yes，则倒序遍历其子视图找到最终响应的子view；如果最终返回一个view，那么即为最终响应view并结束事件传递，如果无值返回则将UIWindow作为响应者。见上图
1.2.4.响应链：由离用户最近的view像系统传递

1、若view的 viewcontroller 存在，则将该事件传递给其viewcontroller响应；如若不存在，则传		递给其父视图；
2、若view的最顶层不能处理事件，则传递给UIWindow进行处理；
3、若UIWindow不能处理，则传递给UIApplication；
4、若UIApplication不能处理，则将该事件丢弃。

1.3.图像显示原理

这三个就是图片显示原理
1.4.卡顿&掉帧图像显示原理

1.4.1.UI卡顿掉帧的原因：
答：在规定的16.7ms之内，在下一帧Vsync信号到来之前，并没有CPU和GPU共同完成下一帧画面的合成 就会导致卡顿和掉帧。
1.4.2.tableView和Scrollview滑动优化方案
从CPU和GPU两方面优化：
CPU方面
对象创建、调整、销毁,可以放到子线程中做
预排版（布局计算、文本计算）可以放到子线程中做， 
预渲染（文本等异步绘制，图片编解码等）可以放到子线程中做，
GPU方面：
纹理渲染：避免离屏渲染，比如，layer圆角，masksToBounds，阴影蒙层，都会触发离屏渲染。
视图混合：避免视图层级太复杂，合理的利用CPU异步绘制机制，来达到提交的位图本身就是一个层			级少的视图，这样也会减轻GPU的压力
1.5.绘制原理&异步绘制图像显示原理
1.6.离屏渲染
2.Objective-C语言特性
2.1.分类（categroy） 和 类扩展（Extension）
2.1.1.分类定义：添加实例方法、类方法、协议、属性 （利用关联对象）
2.1.2.扩展定义：为一个类声明私有的属性、私有成员变量,私有方法、一般类扩展写到宿主类的.m文件中。一般的私有属性写到类扩展中。
2.1.3.分类和类扩展区别：
2.1.3.1.分类(运行时决议)，扩展(编译时决议),所以方法没有实现扩展会报错，分类不会报错。
2.1.3.2.分类原则上只能添加方法而不能添加属性
2.1.3.3.分类有声明和实现,类扩展只有声明,实现是在宿主类中.
2.1.3.4.类扩展不仅可以增加方法，还可以增加实例变量（或者属性），默认是私有的。
2.1.3.5.定义在 .m 文件中的类扩展方法为私有的，定义在 .h 文件（头文件）中的类扩展方法为公有的。类扩展是在 .m 文件中声明私有方法的非常好的
2.1.3.6.可以为系统类添加分类，大部能不添加扩展
2.1.4.总结
2.1.4.1.分类添加的方法会覆盖原方法 同名方法调用的优先级为：分类>本类>父类
2.1.4.2.同名方法谁能生效取决于编译循序，（最后编译的先生效）
2.1.4.3.名字相同的分类会引起编译错误
2.1.4.4.分类的实现原理是将category中的方法，属性，协议数据放在category_t结构体中，然后将结构体内的方法列表拷贝到类对象的方法列表中
2.1.5.分类利用关联对象添加成员变量，是放在哪里了？是否添加到原数组上面了？
答：没有添加到原数组上面，所有分类的关联对象都是放在同一个全局的容器中					Associationsmange，每一个关联对象是存储在 AssociationHashmap上，可能以字典的形式存在
如何擦除被关联的值： 用setObject value传nil 就可以清空
2.2.代理Delegate
2.2.1.什么是代理？
答：代理是一种软件设计模，iOS中以@Protocol的形式存在 并且是一对一关系，
2.2.2.代理的工作流程？
答：代理方把需要实现的接口/属性, 写到协议里面，代理方实现协议中的接口，委托方调用代理方遵从的协议方法。协议中可以定义方法和属性，并且不一定都要实现协议，@required：必须实现的方法 @optional：可选是否实现的方法
2.2.3.代理方和委托方是以什么关系存在的？
答：一般委托方声明weak关键字以避免循环引用， 因为代理方会强引用委托方（stroing），委托方有一个week的弱引用声明。 
2.3.通知Notification
2.3.1.通知特点：
是使用观察者模式来实现的，并且是一对多的关系。
作用是用来进行跨层传递。
2.3.2.Noitification和Delegate的区别：
代理使用代理模式实现的，而通知是用观察者模式实现的。
代理的的传递方式是一对一，通知是一对多的
2.3.3.如何实现通知机制/或者怎么样实现通知机制？
假如通知中心(NSNotificationCenter)是个单例，向通知中心注册观察者，也就是说，这个通知中心有个集合，这个集合存放着观察者。如果发送通知需要name参数，添加观察者也有个name参数，这两个name一样的时候，当发送通知时候，观察者对象就能接受到信息，执行对应的操作。
那么这个集合很容易想到就是NSDictionary!，key就是name，value就是NSArray，里面存放观察者对象。当发送通知时，在通知的字典，根据``name找到value，这个value就是一数组，数组里面存放数据模型(observer、SEL)`。即可执行对应的行为。
2.3.4.通知的发送是同步的，还是异步的？
通知的发送是同步的,在哪一个线程发送就在哪一个线程接收,并没有开启异步线程.通知的异步发送实际上是利用RunLoop机制进行的延时发送,并不是真正意义上的异步线程发送通知.
2.3.5. NSNotificationCenter接受消息和发送消息是在一个线程里吗？如何异步发送消息？
NSNotificationCenter接受消息和发送消息是在一个线程里,想要异步发送消息,那就需要开启一个异步线程,在此线程中进行消息的发送.
2.3.6.NSNotificationQueue是异步还是同步发送？在哪个线程响应？
NSNotificationQueue是同步发送,它的异步发送更准确的说是利用RunLoop机制做的延时发送.同时消息在哪一个线程发送就在哪一个线程响应.

2.3.7. NSNotificationQueue和runloop的关系？
NSNotificationQueue与runloop的关系是紧密相连的,NSNotificationQueue的发送时机是依赖runloop实现的.
2.3.8.如何保证通知接收的线程在主线程?
1.在主线程中进行发送消息即可.
2.如果是在主线程中响应异步线程的通知,可用如下的API.
- (id <NSObject>)addObserverForName:(nullable NSNotificationName)name 
                             object:(nullable id)obj 
                              queue:(nullable NSOperationQueue *)queue 
                         usingBlock:(void (^)(NSNotification *note))block
2.3.9.页面销毁时不移除通知会崩溃吗？
在iOS9之前, 观察中心Center对观察者的引用是unsafe_unretained; 在iOS9之后,观察中心Center对观察者的引用是weak.
unsafe_unretained 是不安全的. 如果对象释放,unsafe_unretained指针是不会置为nil的,所以会造成崩溃问题.但是 weak 在对象释放时,weak修饰的指针会被置为nil,不会造成崩溃.
2.3.10.多次添加同一个通知会是什么结果？多次移除通知呢?
多次添加同一通知,会导致一次发送多次响应. 多次移除通知不会造成crash问题.
2.3.11.下面的方式能接收到通知吗？为什么
// 添加通知
[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(handleNotification:) name:@"TestNotification" object:@1];
// 发送通知
[NSNotificationCenter.defaultCenter postNotificationName:@"TestNotification" object:nil];
答： 不能,这个是因为 Notification 的存储逻辑导致. 我们可以看到 观察者添加通知时,同时存在name和object,所以存放的位置为 NSNotificationCenter的 named 中.
但是在发送通知时,只有 name, 没有object. 这样是会导致查找失败,最终会导致调用失败.
2.4.KVO  key-value-observing
2.4.1.什么是kvo？
答： kvo是观察者设计模式的一种实现，
Apple是用isa混写（isa-swizzing）来实现kvo
2.4.2.isa混写技术在kvo中是怎么实现的？
系统在运行时为我们动态创建一个子类,然后改写isa的指向,同时重写子类的setter方法，来实现kvo的机制的

didChange.. 最有一句话会出发kvo回调方法的实现。
2.4.3.通过KVC设置Value能否生效？
能生效， 因为系统后期会调用isa混写子类setter的重写方法， 所有会生效
2.4.4.直接对成员变量赋值能否触发kvo呢/成员变量直接赋值能否生效？
答：不能生效，通过成员变得赋值是没有办法触发系统的kvo的，
2.4.5.手动kvo是如何实现的？
答：在对变量成员赋值的时候，在那之前和之后，手动添加willChangValueForKye 和didChangValueForKey，然后didChangCalueForKey 在系统内部回调中会触发observeValueforKeyPath 方法，这样就实现了手动kvo了。
2.4.6.kvo总结？
使用setter方法改变值kvo生效。
使用setValue：ForKey：改变值kvo会生效。
成员变量直接修改需手动添加kvo才会生效
2.5.KVC Key-value coding
2.5.1.• -(id)valueForKey:(NSString *)key 的系统实现流程？

系统通过key 所访问的对应的实例变量是否有相应的get方法，如果存在get方法，直接调用，如果不存在会判断实例变量是否存在（是通过accessOins..类方法），
2.5.2.• -(void)setValue:(d)value forKey(NSString *)key 系统实现流程？

系统通过key 判断是否有相应的set方法，如果存在，直接调用，如果不存在会判断实例变量是否存在
2.6.属性关键字
2.6.1.读写权限、
2.6.1.1.readonly
2.6.1.2.readwrite（系统默认）
2.6.2.原子性、
2.6.2.1.atomic （系统默认） 可以保证赋值和获取是线程安全的，但不代表操作和访问时安全的，如果atomic 修饰的是一个数组，他只保证赋值或者获取是线程安全的。但对数组操作（比如添加和移除对象）是不保证线程安全的。
2.6.2.2.nonatomic、
2.6.3.引用计数
2.6.3.1.retain/strong  (retain一般MRC中用，strong ARC中用)
2.6.3.2.assign/unsafe_unretained（assign 基本数据类型和对象数据类型，unsafe_unretained 在MRC中用）
修饰基本数据类型，如int，BOOL等。
修饰对象类型时，不改变其引用计数。
会产生悬垂指针（所修饰的对象再被释放之后assign指针依旧指向原内存地址，这个时候通		过assign指针继续访问原对象会由于悬垂指针的原因导致内存泄露或程序异常）
2.6.3.3.weak：
不改变被修饰对象的引|用计数。
所指对象在被释放之后会自动置为nil。
2.6.3.4.copy：
2.6.3.4.1.浅拷贝：浅拷贝就是对内存地址的复制，让目标对象指针和源对象指向同一片内存空间。增加引用计数+1
2.6.3.4.2.深拷贝：深拷贝让目标对象指针和源对象指针指向两片内容相同的内存空间。
2.6.3.4.3.深拷贝和浅拷贝的区别？
答：是否开辟了新的内存空间。深拷贝会产生新空间，浅拷贝没有
是否影响了引用计数。
2.6.3.4.4.copy总结？
可变对象的copy和mutableCopy都是深拷贝。
不可变对象的copy是浅拷贝，mutableCopy是深拷贝。
copy方法返回的都是不可变对象？
2.6.3.5.@property(copy) NSMutableArray* array 这么声明会出什么问题？
答：如果赋值过来的是NSMutableArray, copy之后是NSArray
如果赋值过来的是NSArray, copy之后是NSArray
2.6.3.6.weak和assign的区别
weak可以修饰对象，而assign可以对象和基本数据类型都可。
weak对象被释放之后会自动置为nil。而assign对象被释放之后指针依旧指向原内存地址。
2.6.3.7.weak对象被释放之后为什么会指向nil呢？

如果不进行判断的话，假如传进来的是原对象， 就会直接release操作，会释放掉对象，这时在retain 就会crsh掉，野指针。
2.6.4.* strong表示指向并拥有该对象。其修饰的对象引用计数会增加1。该对象只要引用计数不为0则不会被销毁。当然强行将其设为nil可以销毁它。
2.6.5.* weak表示指向但不拥有该对象。其修饰的对象引用计数不会增加。无需手动设置，该对象会自行在内存中销毁。
2.6.6.* assign主要用于修饰基本数据类型，如NSInteger和CGFloat，这些数值主要存在于栈上。
2.6.7.* weak 一般用来修饰对象，assign一般用来修饰基本数据类型。原因是assign修饰的对象被释放后，指针的地址依然存在，造成野指针，在堆上容易造成崩溃。而栈上的内存系统会自动处理，不会造成野指针。
2.6.8.* copy与strong类似。不同之处是strong的复制是多个指针指向同一个地址，而copy的复制每次会在内存中拷贝一份对象，指针指向不同地址。copy一般用在修饰有可变对应类型的不可变对象上，如NSString, NSArray, NSDictionary。
2.6.9.* Objective-C 中，基本数据类型的默认关键字是atomic, readwrite, assign；普通属性的默认关键字是atomic, readwrite, strong。
2.7.变量定义
实例变量对象（类初始化的对象就是） 
成员变量（在大括号中的是成员变量）默认对内是共有的，对外是私有的
属性变量（属性是与其他对象交互的变量，会生成默认的setter和getter方法）有property生成器
实例方法 以“——” 减号开头的方法，实例化之后才可以调用
类方法   以 “+” 加号开头的，不需要实例化对象就可以调用
3.Runtime相关 
https://blog.csdn.net/weixin_38934440/article/details/125276142
3.1.你是否了解OC中的runtime？
答：OC是一门动态语言，允许很多操作推迟到程序运行时再进行。其动态性用runtime来支撑和实现的。比如消息机制，分类的底层实现，利用关联对象实现分类添加属性的功能，方法交换，KVC/KVO等。
3.2.你是否了解OC 的消息机制？
答：OC中的方法调用，底层是转换为objc_msgSend函数的调用。
objc_msgSend的执行流程可以分为三大阶段：1）.消息发送、2.动态添加方法、3.消息转发
第一阶段：（消息发送）objc_msgSend
        1，如果消息接收者为nil，退出。
        2，如果消息接收者不为nil，（通过isa找到当前了类）从当前类的缓存cache中查找方法，如果找到则返回结果，如果没有，从当前类的class_rw_t中查找方法，如果找到了方法调用方法结束查找并缓存到当前类的cache中，如果当前类的class_rw_t中没有查找到方法，通过superclass找到当前类的父类重复上面查找流程。如果最终没有找到方法，就进入第二阶段动态方法解析。
第二阶段：（动态方法解析） runtime机制允许动态的添加方法，
        1，如果执行过动态方法解析，进入第三阶段消息转发阶段。
        2，如果没有执行过动态方法解析，开发者可以是使用+ (BOOL)resolveInstanceMethod:(SEL)sel （实力方法）+ (BOOL)resolveClassMethod:(SEL)sel（类方法）这两个函数来动态解析方法，标记已经动态方法解析，然后重走消息发送阶段！
第三阶段：（消息转发）objc_msgForward 
        1，调用- (id)forwardingTargetForSelector:(SEL)aSelector方法（把方法的实现交给其他类来实现，返回能够处理方法的对象），如果返回值不为nil（返回值是其他类），调用objc_msgSend(返回值，SEL)。
如果返回值为nil，调用- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector方法（方法签名，返回方法签名），如果返回值不为nil，调用- (void)forwardInvocation:(NSInvocation *)anInvocation方法（封装了方法的调用），
3.3.分类的底层实现原理？
答：分类的实现原理：编译时将分类的方法（对象方法、类方法），协议、属性等放到category_t的结构体中，在运行时动态的将category_t的内容合并到类或者元类中。
同名方法调用优先级：分类 > 本类 > 父类。（objc_msgSend）。
如果多个分类存在同名方法，运行时到底调用哪个方法有编译器决定，最后一个参与编译的方法会被调用。
3.4.请简述一下KVO的底层实现原理？
答：利用runtime动态生成一个子类，并且让实例对象的isa指向这个全新的子类，重写子类setter方法。当修改实例对象的属性时，内部会调用Foundation的__NSSetIntValueAndNotify函数
，函数内部的调用流程是：
1，willChangeValueForKey
2，父类原来的setter
3，didChangeValueForKey
4，内部触发监听器的监听方法observeValueForKeyPath
3.5.如何手动触发KVO？
手动调用 willChangeValueForKey: 和 didchangeValueForKey: 就可以触发KVO.
3.6.直接修改成员变量会触发KVO？
答: 不会. 结合之前说的KVO的本质, 我们知道KVO是通过 setter 方法内部调用 willChangeValueForKey: 和 didchangeValueForKey: 触发的
3.7.通过KVC修改属性会触发KVO？
答: 会触发. 即使没有 setter 方法也会触发，KVC内部做了监听操作。
3.8.请简述关联对象给分类添加属性的原理？
： 
AssociationsManager这个类，它的内部维护了一个全局的字典AssociationsHashMap
AssociationsHashMap字典的key对应的是disguised(object),类似于当前对象的内存地址,而value存储的是ObjectAssociationMap字典,ObjectAssociationMap字典的key对应的是添加的属性的名字，value呢，则对应的是ObjcAssociation实例,ObjcAssociation实例则存储着添加属性的值和策略
3.9.Runtime常见方法？
增加
1. 增加函数:class_addMethod 
2. 增加实例变量:class_addIvar 
3. 增加属性:@dynamic标签，或者class_addMethod，因为属性其实就是由getter和setter函数组成 
4. 增加Protocol:class_addProtocol 
获取
1. 获取函数列表及每个函数的信息(函数指针、函数名等等):class_getClassMethod method_getName ... 
2. 获取属性列表及每个属性的信息:class_copyPropertyList property_getName 
3. 获取类本身的信息,如类名等：class_getName class_getInstanceSize 
4. 获取变量列表及变量信息：class_copyIvarList 5. 获取变量的值
替换
1. 将实例替换成另一个类：object_setClass 
2. 将函数替换成一个函数实现：class_replaceMethod 
3. 直接通过char *格式的名称来修改变量的值，而不是通过变量
4.RunLoop相关
4.1.什么是RunLoop？
从字面意思看:运行循环; 没有消息时休眠避免资源占用，有消息时立即唤醒，在这个循环内部不断处理各种任务(比如source, Timer, Observer)。
一个线程对应一个Runloop, 主线程的Runloop默认已经启动, 子线程的Runloop得手动启动(调用run方法)
Runloop只能选择一个Mode启动, 如果当前的Mode中没有任何Source, Timer, Observer那么直接退出Runloop
4.2.讲讲 RunLoop，项目中有用到吗？
1、控制线程生命周期（线程保活 ）
2、在子线程中开启一个定时器、 在子线程中进行一些长期监控）
3、解决NSTimer在滑动时停止工作的问题
4、监控应用卡顿
4、性能优化
2.可以控制定时器在特定Mode下执行
3.可以让某些事件(行为, 任务)在特定Mode下执行
4.可以添加Observer监听RunLoop的状态, 比如监听点击事件的处理(在所有点击事件之前做一些事情)
4.3.runloop内部实现逻辑？
第一步：首先通知Observers进入Loop 然后处理一些 定时器、事件、block
第二步：事件处理完成之后通知Observers进入休眠状态开始休眠 等待消息唤醒
第三步：通知Observers结束休眠处理一些 定时器、事件、block
4.4.runloop和线程的关系？
一对一关系
1、每条线程都有唯一的一个与之对应的RunLoop对象
2、RunLoop保存在一个全局的Dictionary里，线程作为key，RunLoop作为value
3、线程刚创建时并没有RunLoop对象，RunLoop会在第一次获取它时创建（[NSRunLoop currentRunLoop]）
4、RunLoop会在线程结束时销毁
5、主线程的RunLoop已经自动获取（创建），子线程默认没有开启RunLoop
4.5.timer 与 runloop 的关系？
一个runloop下会包含很多个model,每个model下又会包含很多的timer/source/observe，同一时刻runloop只能在一种模式下运行，处理一种模式下的状态
所以层次关系是    runloop 包含 model 包含 timer/source/observe   
4.6.程序中添加每3秒响应一次的NSTimer，当拖动tableview时timer可能无法响应要怎么解决？
runloop 常用的mode有两种 ：NSDefaultRunLoopMode、UITrackingRunLoopMode
程序默认处于 NSDefaultRunLoopMode 模式下  但是页面滑动的时候 runloop的模式就会切换到 UITrackingRunLoopMode 此时就会退出 NSDefaultRunLoopMode ，在NSDefaultRunLoopMode模式下所有的操作都会被停止（如：NSTimer事件响应）。当页面停止滑动时 就会自动切换到NSDefaultRunLoopMode，（此时NSTimer才会继续工作 ）
因此：想要在当拖动tableview时timer继续工作 就必须把 timer 添加到runloop任何模式都能工作。代码如下
[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];
NSRunLoopCommonModes：并不是一个真的模式，它只是一个标记
4.7.runloop 是怎么响应用户操作的， 具体流程是什么样的？
首先由Source1捕捉系统事件  然后Source1又将事件存放在事件队列中交给Source0来处理。
4.8.说说runLoop的几种状态？
一共有6中状态：
1、kCFRunLoopEntry = (1UL << 0) ,              //即将进入Loop
2、kCFRunLoopBeforeTimers = (1UL << 1)，       // 即将处理Timer
3、kCFRunLoopBeforeSources = (1UL << 2) ,       //即将处理Source
4、kCFRunLoopBeforeWaiting = (1UL << 5) ,       // 即将进入休眠 ，
5、kCFRunLoopAfterWaiting = (1UL << 6) ,        / /刚从休眠中唤醒
6、kCFRunLoopExit = (1UL << 7)，              //即将退出Loop
4.9.runloop的mode作用是什么？
常见的mode有三种  NSDefaultRunLoopMode和UITrackingRunLoopMode
1、kCFRunLoopDefaultMode（NSDefaultRunLoopMode）：App的默认Mode，通常主线程是在这个Mode下运行
2、UITrackingRunLoopMode：界面跟踪 Mode，用于 ScrollView 追踪触摸滑动，保证界面滑动时不受其他 Mode 影响。
3.kCFRunLoopCommonModes：伪模式，不是一种真正的运行模式，是同步Source/Timer/Observer到多个Mode中的一种解决方案
4.10.RunLoop的作用？
1、保持程序的持续运行，接受用户输入。
2、处理APP中的各种事件（如触摸事件、定时器事件、Selector事件）
3、节省CPU资源，提高程序性能：该做事时做事，该休息时休息。
4、调用解耦。
参考：https://blog.csdn.net/qq_33336219/article/details/119906707 iOS 中高级面试题
5.内存管理
5.1.什么是MRC？
MRC是手动管理内存
alloc、retain +1  release -1
retainCount 获取当前对象的引用计数值
autorelease 调用对象的autorelease方法，当前这个对象会在autoreleasepool结束时调用release操作，进行引用计数会-1
dealloc 在MRC中调用它需要super dealloc废弃父类的成员变量
标红是MRC独有的
5.2.什么是ARC？
5.2.1.ARC是编译器（LLVM）自动为我们插入retain和release操作之外，还需要runtime的功能进行支持，然后由他两共同些协作。才能组成ARC的全部功能。
5.2.2.在ARC中禁止手动调用retain/release/retainCount/dealloc
5.2.3.ARC中新增week 和Strong 属性关键字。
5.3.MRC和ARC有什么区别？
答：MRC是手动管理内存，ARC是编译器和runtime协作自动管理内存
同时MRC中可以调用一些引用计数的方法，而ARC中是不可以的。
5.4.破除循环引用？
5.4.1.__weak 
相互持有的对象，生命其中一个为week属性关键字，防止循环引用
5.4.2.__block 
在MRC 下，用它修饰的对象不会增加引用计数，可以避免循环引用
在ARC下，用它修饰对象会强引用，无法避免循环引用，需手动破环。
5.4.3.__unsafe__unretained （不建议用）
修饰对象不会增加引用计数，避免循环引用，
如果修饰对象在某一时刻背释放，会产生悬垂指针，如果用这个指针再		去访问原对象的话，会由于悬垂指针的问题导致内存泄漏
5.5.常见的循环引用:
Block： 见附件
NSTimer：见附件
5.6.手动内存管理的原则:
1)一旦创建一个对象,这个对象的引用计数器的值就为1,所以必须要匹配1个release
2)只有在多1个人使用这个对象的时候才retain
   只有在烧1个人使用这个对象的时候才release
3)retain的次数要和release次数相匹配
4)永远不要手动调用对象的dealloc方法,而是让系统自动调用
5.7.手动内存管理中内存泄露的几种情况:
1)retain和release不匹配，retain多余release导致的内存泄露;
2)对象使用过程中，没有被release，而被赋值为nil;
3) 在方法中不当的使用了retain;
手动内存管理的关键就是防止内存泄露!!!!!防止内存泄露要记住:
1) 谁创建”alloc","new",谁"release";
2) 谁”retain",谁"release";
5.8.自动释放池(autorelease)
1)原理:
存储在自动释放池的对象,在自动释放池销毁时,会自动调用该对象的release方法,故将对象存储在自		 动释放池中,就不需要再写release
5.9.SideTable
SideTable就是一个结构体，内部主要有引用计数表和弱引用表两个成员，内存存储的其实都是对象的地址和引用计数和weak变量的地址，而不是对象本身的数据.


6.Block相关
6.1.block的含义？
block是oc中一项强大的特性,是oc对闭包函数的实现.实质上也是一个对象.
6.2.block的三中分类？
当我们生命一个block的时候,如果这个block 没有捕获外部变量,那这个block就是在全局区,此时对NSGlobalBlock的retain ,copy,release 都是无效的,ARC,MRC下都是如此.
1.在ARC环境下 我们生命一个block(没有添加额外修饰符,默认strong), 一旦该block捕获了外部变量,系统会默认有一个copy动作.将栈区的block迁移到堆区,延长block的生命周期,对于栈区的block而言,当函数推出的时候,该空间就被系统回收了.
当我们使用weak或者是_unsafe_unretain关键修饰符的时候,系统就不会默认执行copy操作.不会将其迁移到堆区,
2.在MRC环境下需要手动实现copy操作.
三,block捕获的外部变量,是将其copy到自己的数据结构内部来实现的,因此对于捕获的外部变量,block并不能修改,我要改变外部的内存地址,也就是使用_ _block修饰符,将指针在栈区的内存地址迁移到堆区,由此可见 block的作用是改变外部变量的内存地址,而不是简单 的使写操作生效.
3.如果block捕获的外部变量是使用static 或者是声明的全局变量,那么block是可以直接修改该外部变量的.因为全局变量或静态变量的地址是固定的存放于静态区.block在读取静态区的变量时是可以直接从其所在的内存地址中读取的.获取到最新的值,而不是在定义的时候copy的常量.
6.3.是否所有的Block中，使用self 都会导致循环引用？
例如:1.uiview动画为什么不会引起循环引用?
答:UIView的调用的是类方法，当前控制器不可能强引用一个类 ，所以循环无法形成
6.4.masory为什么不会引起循环引用？
答:masory 并没有强引用block ,里面的block只是局部变量,函数结束block就被释放了.
6.5.afn为什么不会引起循环引用？
AFN无循环是因为绝大部分情况下，你的网络类对象是不会被当前控制器引用的，这时就不会形成引用环。（查阅资料得知）
6.6.block里面 使用self 一定会引起循环引用吗？
不一定.循环引用的原因是相互指引,相互是关键.如果相互这一层关系达不到就没有所谓的循环引用.
如下图	




6.7.什么情况下会引起循环引用？
1>强引用自定义的block. 里面再次调用self,导致的循环引用.
2>循环引用的发生的条件就是强持有这个block ,并且被block里面的加入的对象强持有.
3>使用NSNotification 使用系统自带的block 会发生循环引用.如下图:

6.8.对于block的修饰符的理解？
答:block声明之后内存是存在于栈上的,而不是存在于堆上.它本身的作用域是创建时的作用域,一旦在作用外的地方调用block将导致程序崩溃
使用retain也可以,但是 block的retain行为 默认是用copy实现的.
因为block变量默认为栈变量,为了能够在block声明的作用域外使用,所以把block拷贝到堆上去,所以说为了block属性声明和实际的操作一致,最好声明为copy.
7.多线程相关
7.1.NSThread：
优点:NSThread 比其他两个轻量级，使用简单
缺点：需要自己管理线程的生命周期、线程同步、加锁、睡眠以及唤醒等, 在控制线程优先级方面只能通过“线程休眠sleepForTimeInterval来控制”，且并不精确
7.2.NSOperation：
有一个“线程池”的概念，通过两种方式“NSInvocationOperation”、“NSBlockOperation”进行创建和操作，可以设置最大并发数、可以控制优先级(addDependency)添加依赖关系. 
7.3.GCD：
GCD基于C语言，是替代前两者的高效强大的技术，执行效率比前两者高，代码比较集中易维护
全局队列:dispatch_get_globle_queue(0,0) 
主队列:dispatch_get_main_queue()
自定义队列:dispatch_queue_creat ( 参数1 , 参数2 )
参数1是 队列的名字标识
参数2 有两个选择
a. DISPATCH_QUEUE_SERIAL //是该队列是一个串行队列 即有序执行 
b. DISPATCH_QUEUE_CONCURRENT //该队列是一个并发队列,在执行第一个的同时会不等前一个队列执行完,就会在其他线程中执行后一个队列或者其中的其他队列 (无次序之分)

死锁,在主线程(dispatch_get_main_queue中)中调用dispatch_sync
原因:sync向dispatch_get_main_queue()插入同步thread，sync会等到后面的block执行完成才返回。sync又在主队列里面，是个串行队列，sync是后面才加入的，前面一个是主线程，所以sync想执行block必须等待前一个主线程执行完成，而主线程却在等待sync返回，去执行后续工作，从而造成死锁

dispatch_async(queue,block) async 异步队列，dispatch_async 函数会立即返回, block会在后台异步执行。 dispatch_sync(queue,block) sync 同步队列，dispatch_sync 函数不会立即返回，即阻塞当前线程,等待 block同步执行完成。
7.4..谈谈你对进程和线程的理解？
1.进程是指在系统中正在运行的一个应用程序；线程是CPU调度的最小单元
2.每个进程之间是独立的，每个进程具有独立的内存空间；同一个进程内的线程共享进程资源
3.一个进程可以拥有多个线程，但最少要有一个主线程；
4.进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响；一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮
7.5.iOS中，有哪些实现多线程的方式？
1，NSThread：OC语言。面向对象，简单易用，可直接操作线程。生命周期：自己管理。
2，GCD：替代NSThread，充分利用多核的技术。生命周期：系统管理。
3，NSOperaton：：基于GCD的封装。比GCD多了一些简单实用的功能。生命周期：系统管理。
7.6.请说一下多线程中GCD和NSOperation的区别？
GCD：
1，提供了一次性执行的代码，也就是说保证了一段代码在程序执行的过程中只被执行一次，并且是线程安全的！（dispatch_once），实现单例。
2，提供了延迟执行的简便方法。（dispatch_after）
3，提供了调度组的使用，监听一些列异步方法之行结束之后，我们得到统一的通知，（dispatch_group，dispatch_group_async，dispatch_group_notify）（dispatch_group_enter/dispatch_group_leave）
4，提供了快速迭代的方式dispatch_apply。按照指定的次序将制定的任务追加到指定的队列中，并等待全部队列执行结束！
5，提供了信号量（dispatch_semaphore_t），使用信号量可以实现安全的多线程！（加锁的一种方式）
6，提供了栅栏函数，dispatch_barrier_async，使用栅栏函数可以实现线程的多度单写！
NSOpearion：
1，NSOperatoin是对GCD更高层次的封装。
2，NSOperation可以设置两个操作之间的依赖关系。
3，NSOperation是个抽象类，开发中使用它的两个子类，NSBlockOperation/NSInvocationOperation。
4，使用KVO，观察NSOperation的各种状态（isExecuted是否正在执行，isFinished是否结束，isCancled是否取消）。无法判断GCD的状态。
5，NSOperation可以设置操作的优先级。
6，NSoperation可以方便的取消一个操作的执行
7，可以重写NSOperation的main和start函数。

7.7.dispatch_once是怎样保证线程安全的？ 单利




7.8.dispatch_after延迟执行，执行时间是准确的吗？
dispatch_after的延迟执行时间不是准确的，因为dispatch_after是在指定时间之后将任务添加到主队列，并不是在指定时间之后开始执行处理！
7.9.说说你对dispatch_apply的理解？
dispatch_apply 是GCD提供的一种快速迭代的函数，按照指定的次数将指定的任务追加到指定的队列中，并等待全部任务结束。如果用在串行队列，就和for循环一样，按顺序同步执行。如果用在并发队列，别追加到队列的任务会异步执行，并且等待全部任务结束！使用实例：
    dispatch_apply(5, dispatch_queue_create("xxx", DISPATCH_QUEUE_CONCURRENT), ^(size_t iteration) {
        NSLog(@"iOS");
    });
    //会等到上面的任务全部执行结束在执行下面的代码
    NSLog(@"结束");
7.10.说说你对dispatch_group的理解？
GCD提供的队列组，有两种使用方式dispatch_group_async和dispatch_group_enter/dispatch_group_leave，使用过程中要根据任务类型选择使用哪种方式。
如果面试者的回答没有说到所处理的任务类型，那么只能说面试者是知道有这个东西，没有使用或了解过！！！
如果任务类型是同步任务，使用dispatch_group_async和dispatch_group_enter/dispatch_group_leave是同样的，可以实现相同的功能。
如果任务类型是异步任务，比如（AF）网络请求，那么区别就很大了。
如果任务类型是异步任务，使用dispatch_group_async不能等到所有异步任务执行完成，再去之执行dispatch_group_notify中的代码！！！使用dispatch_group_enter/dispatch_group_leave可以实现执行完添加的异步任务，最后执行dispatch_group_notify中的代码！！！但是异步任务的顺序是不可控制的，也就是不能控制队列组中的异步任务的顺序！！！
如果你要实现这样一个功能，请求网络A和B,然后根据A/B返回的内容去刷新页面，如果使用dispatch_group，那么只能使用dispatch_grouo_enter/dispatch_grouo_leave！！！使用dispatch_group_async是不能实现这个功能的！
使用dispatch_group实现异步任务的顺序执行是做不到的！！！
7.11.说说你项目中的哪些功能使用了dispatch_semaphore_t，解决了什么问题？
这个问题主要考察上面提到的异步任务的顺序执行。
使用信号量（dispatch_semaphore_t）可以实现异步任务的顺序执行（也就是将异步任务转换为同步任务执行）不要阻塞主线程！。也是多线程加锁的一种实现方式，保证线程安全。
dispatch_semaphore_create(intptr_t value)
创建一个队列组，传入得值>=0，传入的值控制控制并发线程的数量！！！，如果我们传入2，那么就表示当前最多有两个线程同时执行。
dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout);
等待当前线程，直到某个时间释放！！！
dispatch_semaphore_signal(dispatch_semaphore_t dsema);
增加信号量，使信号量的值加1！！！
如果在工作中有这样一个需求，（使用AFNetworking）请求A接口拿到A接口返回的id_a，用id_a作为参数去请求B接口，拿到B网络返回的name_b去查数据库，然后刷新页面。该怎么实现呢？
当然你可以一层层去嵌套，但是作为有点经验的程序员都会这样干。这时候可以通过信号量（dispatch_semaphore）实现。
以下是主要实现的代码，


7.12.请实现一个多读单写的功能？
我们可以用dispatch_barrier_async实现
7.13.说说你对NSOperation/NSOperationQueue的使用和理解？
NSOperation/NSOperationQueue 是系统提供的一套多线程实现方案。实际上NSOperation/NSOperationQueue是基于GCD更高层次的封装，完全面向对象，比GCD简单易用，代码可读性更高。
使用步骤：
1，创建操作，将操作封装到NSOperation对象中，
2，创建队列，NSOperationQueue，
3，将操作添加到队列中，
之后，系统会将队列中的操作取出，在新线程中执行操作。添加到队列中的操作，首先进入准备就绪状态（就绪状态取决于操作之间的依赖关系），然后进入就绪状态的操作开始执行，开始执行的顺序取决于操作之间的相对优先级，操作执行结束的顺序，取决于操作本身！
我们先来理解这一部分的操作/队列/线程
* 添加操作到队列，开启新线程！
* 具体开启线程数量，有系统决定！操作在哪条线程执行有系统决定！
* 一个队列中同时能并发执行的最大操作数由maxConcurrentOperationCount 最大并发操作数。也就是一个操作队列中的操作是串行还是并发执行，由maxConcurrentOperationCount它决定！
maxConcurrentOperationCount = -1，默认，并发执行，
maxConcurrentOperationCount = 1，串行执行，
maxConcurrentOperationCount = 3，并发执行，一个队列中同时能并发执行的最大操作数是3，但是这个值不应大于系统设定的默认值，
* 操作的优先级适用于同一队列中的操作，决定了进入准备就绪状态下的操作之间的开始执行顺序，优先级不能取代依赖关系。
* 线程间的通讯 

*操作的状态
op1.isReady; 是否准备就绪
op1.isExecuting; 是否正在执行
op1.isCancelled; 是否已经取消
op1.isFinished; 是否执行完成
* 取消一个操作和队列的取消
 [op1 cancel]; 取消操作，实际上是标记isCancelled状态
 [queue cancelAllOperations]; 取消队列
这里的取消不是真正意义上的取消，而是当当前的操作执行完成之后，不再进行新的操作。
使用NSOperation/NSOperationQueue实现异步任务的顺序执行是做不到的！！！
7.14.你是否在定义过NSOperation？
自定义NSOperation可以通过重写main或者start方法。重写main方法，不需要管理操作的状态属性isExecuting和isFinished。重写start方法需要管理操作的状态属性。
7.15.参考：https://blog.csdn.net/weixin_38934440/article/details/123135993
8.网络相关 Socket通信,TCP/IP和HTTP
8.1.HTTP协议特性：
HTTP：超文本传输协议 构建于 TCP/IP 协议之上，是应用层的协议, 短连接,是一种不保存状态的协议,简单说HTTP 对于请求和响应都不会做持久化处理的
灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。
无连接：每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。
无状态：对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传。
8.2.HTTP请求方法：
GET：请求获取Request-URI标识的资源，请求参数附加在url上，明文展示。
POST：在Request-URI所标识的资源后附加新的数据，常用于修改服务器资源或者提交资源到服务器。POST请求体是放到body中的，可以指定编码方式，更加安全。
DELETE：请求服务器删除Request-URI所标识的资源。
HEAD：请求获取由Request-URI所标识的资源的响应消息报头。
PUT：请求服务器存储一个资源，并用Request-URI作为其标识。
TRACE：请求服务器回送收到的请求信息，主要用于测试或诊断。
OPTIONS：请求查询服务器的性能，或者查询与资源相关的选项和需求。
8.3.HTTP三次握手？
第一次握手：建立连接时，客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认； 
第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态； 第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手
8.4.HTTP为什么要三次握手？
为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。
我们假设一种情况，有一个建立连接的第一次握手的报文段因为滞留到网络中过了较长时间才发送到服务端。这时服务器是要做ACK应答的，如果只有两次握手就代表连接建立，那服务器此时就要等待客户端发送建立连接之后的数据。而这只是一个因滞留而废弃的请求，是不是白白浪费了很多服务器资源
8.5.Charles如何实现HTTPS的拦截？
Charles要实现对https的拦截，需要在客户端安装Charles的证书并信任它，然后Charles扮演中间人，在客户端面前充当服务器，在服务器面前充当客户端。
8.6.TCP / UDP是什么？
TCP是传输控制协议，提供的是面向连接、可靠的字节流服务。当客户的服务器彼此交换数据前，必须先在双方之间建立一个TCP连接，之后才能传输数据。TCP提供超时重发，丢弃重复数据，检验数据，流量控制等功能，保证数据能从一端传到另一端。

UDP是用户数据报协议，是一个简单的面向数据报的运输层协议。UDP不提供可靠性，它只是把应用程序穿给IP层的数据报发送出去，但是并不能保证它们能到达目的地。由于UDP在传输数据报前不用再客户的服务器之间建立一个连接，且没有超时重发等机制，故而传输速度很快。
8.7.DNS解析
DNS是因特网上作为域名和IP地址相互映射的一个分布式数据库，能够使用户通过域名访问到对应的服务器（IP地址）
1、浏览器中输入想要访问的网站域名，操作系统会检查本地hosts文件是否有这个网址的映射关系，如果有就调用这个IP地址映射，完成域名解析。没有的话就走第二步。
2、客户端回向本地DNS服务器发起查询，如果本地DNS服务器收到请求，并可以在本地配置区域资源中查到该域名，就将对应结果返回为给客户端。如果没有就走第三步。
3、根据本地DNS服务器的设置，采用递归或者迭代查询，直至解析完成
8.8.Session / Cookie的区别
1、存储位置：Cookie存放在客户端上，Session数据存放在服务器上。
2、Session 的运行依赖 session id，而 session id 是存在 Cookie 中的，也就是说，如果浏览器禁用了 Cookie ，同时 Session 也会失效
3、安全性：Cookie存在浏览器中，可能会被一些程序复制，篡改；而Session存在服务器相对安全很多。
4、性能：Session会在一定时间内保存在服务器上，当访问增多，会对服务器造成一定的压力。考虑到减轻服务器压力，应当使用Cookie

HTTP 是无状态协议，说明它不能以状态来区分和管理请求和响应。也就是说，服务器单从网络连接上无从知道客户身份。可是怎么办呢？就给客户端们颁发一个通行证吧，每人一个，无论谁访问都必须携带自己通行证。这样服务器就能从通行证上确认客户身份了。这就是Cookie的工作原理。

Cookie：Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，实际上Cookie是服务器在本地机器上存储的一小段文本，并随着每次请求发送到服务器。Cookie技术通过请求和响应报文中写入Cookie信息来控制客户端的状态。

Session：Session机制是一种服务器端的机制，服务器使用一种类似于散列表的结构来保存信息。当有用户请求创建一个session时，服务器会先检查这个客户端里是否已经包含了一个Session标识（session id），如果有就通过session id把session检索出来。如果没有就创建一个对应此Session的session id。这个session id会在本次响应中返回给客户端。
8.9.Http 和 Https 的区别？Https为什么更加安全？
1.HTTPS 需要向机构申请 CA 证书，极少免费。
2.HTTP 属于明文传输，HTTPS基于 SSL 进行加密传输。
3.HTTP 端口号为 80，HTTPS 端口号为 443 。
4.HTTPS 是加密传输，有身份验证的环节，更加安全。
SSL(安全套接层) TLS(传输层安全)
以上两者在传输层之上，对网络连接进行加密处理，保障数据的完整性，更加的安全。
http 连接 所谓的短连接 即客户端向服务器发送一次请求,服务器响应后连接立即断开.
http协议: 应用层 简单对象访问协议 http连接是基于tcp连接的
tcp协议: 对应传输层 (Transmission Control Protoco)
ip协议:对应网络层
tcp/ip 是传输层协议,主要解决数据如何在网络中传输,而http是应用层协议,主要解决如何包		 装数据
8.10.Socket？
Socket是对tcp/ip协议的封装,它本身不是协议,而是一种调用接口(api)
Socket连接 所谓的长连接 理论上客户端和服务端一旦建立连接后将不会主动断掉.除网络		 故障外 
8.11.网络状态码：
200 OK 客户端请求成功
301 Moved Permanently 请求永久重定向
302 Moved Temporarily 请求临时重定向
304 Not Modified 文件未修改，可以直接使用缓存的文件。
400 Bad Request 由于客户端请求有语法错误，不能被服务器所理解。
401 Unauthorized 请求未经授权。这个状态代码必须和WWW-Authenticate报头域一起使用
403 Forbidden 服务器收到请求，但是拒绝提供服务。服务器通常会在响应正文中给出不提供服务的原因
404 Not Found 请求的资源不存在，例如，输入了错误的URL
500 Internal Server Error 服务器发生不可预期的错误，导致无法完成客户端的请求。
503 Service Unavailable 服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常。
9.设计模式相关（六大设计模式）
9.1.责任链
9.2.桥接
9.3.适配器
9.4.单例
9.5.命令
10.架构-框架相关
11.算法相关
12.第三方库相关
13.WKWebView与JS交互面试题
13.1.简述下使用流程？
签三个代理（WKNavigationDelegate, WKUIDelegate, WKScriptMessageHandler）
声明WKWebView、UIProgressView 对应的属性，创建web加载 添加网页进度和标题进度的观察者。 后期在dealloc中移除。
13.2.WKNavigationDelegate的一些方法作用？
开始加载，加载成功，内容开始返回，加载失败，白屏时调用（网页内存过大，会出现白屏问题）reload
13.3.加载本地文件的步骤？

13.4.项目中是否有使用过WKWebView，描述与jS的交互流程？

13.5.WebViewJavascriptBridge使用过吗？

13.6.OC调用异步JS方法，并获取JS的返回值，怎么实现？

14.方法的重写与重载总结
重写(Override) : 发生在子类和父类之间 , 重写即子类将父类中的方法重写了一遍.
方法与父类中的某一方法具有相同的方法名,返回值类型和参数表列,则新方法覆盖原方法 . 如需父类中的方法需要用super关键字.
重载(Overload) : 让类以统一的方式处理不同类型数据的一种方法 . 必须有不同的参数表列 .

15.“深拷贝”和“浅拷贝”
浅拷贝：指针的拷贝，对象指向同一个内存地址，
深拷贝：内容的拷贝，对象指向不同的内存地址。
非容器类不可变 nsstring copy是浅拷贝（返回不可变对象） mutablecopy 是深拷贝 （返回可变对象）
非容器类可变 NSMutableString copy  mutablecopy 都是是深拷贝 （都返回可变对象）
容器类不可变数组 NSArray copy是浅拷贝 mutablecopy是深拷贝
容器类可变数组 NSMutableArray copy mutablecopy都是深拷贝
16.block 为甚用copy而不是用retain？
block本身是像对象一样可以retain，和release。但是，block在创建的时候，它的内存是分配在栈(stack)上，而不是在堆(heap)上。他本身的作于域是属于创建时候的作用域，一旦在创建时候的作用域外面调用block将导致程序崩溃。
使用retain也可以，但是block的retain行为默认是用copy的行为实现的，
因为block变量默认是声明为栈变量的，为了能够在block的声明域外使用，所以要把block拷贝（copy）到堆，所以说为了block属性声明和实际的操作一致，最好声明为copy。


AFNetworking主要是对NSURLSession和NSURLConnection(iOS9.0废弃)的封装,其中主要有以下类:

1). AFHTTPSessionManager：内部封装是 NSURLSession, 负责发送网络请求,使用最多的一个类。
2). AFNetworkReachabilityManager：实时监测网络状态的工具类。当前的网络环境发生改变之后,这个工具类就可以检测到。
3). AFSecurityPolicy：网络安全的工具类, 主要是针对 HTTPS 服务。
4). AFURLRequestSerialization：序列化工具类,基类。上传的数据转换成JSON格式
5). AFURLResponseSerialization：反序列化工具类;基类.使用比较多:
6). AFJSONResponseSerializer; JSON解析器,默认的解析器.
7). AFHTTPResponseSerializer; 万能解析器; JSON和XML之外的数据类型,直接返回二进制数据.对服务器返回的数据不做任何处理.
8). AFXMLParserResponseSerializer; XML解析器;

OC中的方法调用其实都是转成了objc_msgSend函数的调用，给receiver（方法调用者）发送了一条消息（selector方法名）
objc_msgSend底层有3大阶段
消息发送（当前类、父类中查找）、动态方法解析、消息转发
问: runtime具体应用?
 • 利用关联对象（AssociatedObject）给分类添加属性
 • 遍历类的所有成员变量（修改textfield的占位文字颜色、字典转模型、自动归档解档）
 • 交换方法实现（交换系统的方法）
 • 利用消息转发机制解决方法找不到的异常问题
消息传递、转发<消息机制>
访问私有变量 --eg:(UITextFiled 的修改）
交换系统方法 --eg:(拦截--防止button连续点击）
动态增加方法 --(然并卵 求大神指点）
为分类增加属性 --(用的比较多)
字典转模型 -- eg:(YYModel框架可以去看看源码）

masonry  的内部实现原理和相对控件约束的方法深入解析
masonry 为什么没有循环引用
虽然block块内确实对调用对象有强引用，block的变量捕捉会使得调用对象引用计数+1.但是block循环引用的前提条件是调用对象直接或者间接对block持有强引用。而masonry的block方法实现中并不涉及

提高APP性能用ARC管理内存
2、在正确的地方使用 reuseIdentifier
3、尽量把views设置为透明
4、避免过于庞大的XIB
5、不要阻塞主线程
6.重用和延迟加载(lazy load) Views
7.避免过于庞大的XIB，因为他们是在主线程上加载的。所以尽量使用没有这个问题的Storyboards
8.选择是否缓存图片。常见的从bundle中加载图片的方式有两种，一个是用imageNamed，二是用imageWithContentsOfFile

支付宝:
向服务端请求数据, 服务端获取签名后返回一个带签名后的订单信息 之后app携带签名后的订单信息调起支付宝,完成支付后返回同步支付结果,服务端验证签名信息,解析支付结果,
17.NSString NSMutableString 区别
18.yymodel框架原理分析
野指针:没有初始化的指针变量
僵尸对象:指一个对象已经被回收,但其数据还存在内存中(僵尸对象有可能可以访问,也有可能不能访问,取决于所占用空间是否已被重新分配.然而,对象一旦被回收就不该再被访问,此时可以开启僵尸对象检测,这样系统会自动检查是否为僵尸对象,但同时也会降低执行效率).
内存泄露:对象没有在该回收的时候被回收,而是一直驻留在内存中,直到程序结束的时候			才被释放
六: SQLite, FMDB ,CoreData,NsUserDefaults
参考：https://www.jianshu.com/p/39ca1a593ca2
七:Git,Svn等版本控制工具

九: 单利


